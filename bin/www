#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var _ = require('lodash');
var app = require('../app');
var server = require('http').Server(app);
var io = require('socket.io')(server);
var base = require('../db').base;
/**
 * Listen on provided port, on all network interfaces.
 */
var colors = [
  '#0000aa',
  '#0000dd',
  '#00aa00',
  '#00aaaa',
  '#00aadd',
  '#aa0000',
  '#aa00aa',
  '#aaaa00',
  '#aaaaaa',
  '#aaaadd',
  '#aadd00',
  '#aaddaa',
  '#aadddd',
  '#dd0000',
  '#dd00aa',
  '#dd00dd',
  '#ddaa00',
  '#ddaaaa',
  '#dddd00',
  '#ddddaa',
  '#dddddd'
];

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min;
}

server.listen(3000);
server.on('error', onError);
server.on('listening', onListening);
base.create();

/**
 * Web sockets listeners for the different events
 */
server.listen('3000');
io.on('connection', function(socket){
  var room;
  if(socket.handshake.query.amountOfPlayers){
    // Is the server
    room = base.findRoom(socket.handshake.query.room);
    if (room === undefined) {
      room = {
        id: socket.id,
        room: socket.handshake.query.room,
        pass: socket.handshake.query.pass,
        amountOfPlayers: socket.handshake.query.amountOfPlayers
      }
      base.insertRoom(room);
      console.log('Room Created: ' + JSON.stringify(_.pick(room, ['id', 'room', 'pass'])));
    }
    io.sockets.connected[socket.id].emit('current-players', { msg: "Current players", room: socket.handshake.query.room, players: base.getRoomPlayers(socket.handshake.query.room) });
  } else {

    var player = {
      id: socket.id,
      room: socket.handshake.query.room,
      name: socket.handshake.query.name,
      color: colors[getRandomInt(0,colors.length)]
    };
    base.insertPlayer(player);
    console.log('Player connected: ' + JSON.stringify(_.pick(player, ['id', 'room', 'name'])));
    var wantedRoom = base.getRoomFromPlayerId(socket.id);
    if(wantedRoom !== undefined) {
      socket.broadcast.to(wantedRoom.id).emit('user-connected', { msg: "usuario connectado", player: player });
    }
  }

  socket.on('button-clicked', function(msg){
    console.log('button-clicked: ' + msg.room + ', ' + msg.button);
    var playerRoom = base.getRoomFromPlayerId(socket.id);
    socket.broadcast.to(playerRoom.id).emit('button-clicked', msg);
  });

  socket.on('spot-assigned', function(player){
    console.log('spot-assigned: ' + JSON.stringify(player));
    socket.broadcast.to(player.id).emit("spot-assigned", player);
  });

  socket.on('game-started', function(msg){
    console.log('game-started!!');
    socket.broadcast.emit('game-started', {});
  });

  socket.on('disconnect', function() {
    var player = base.findPlayer(socket.id);
    if (player !== undefined) {
      var wantedRoom = base.getRoomFromPlayerId(socket.id);
      socket.broadcast.to(wantedRoom.id).emit('user-disconnected', {msg: "usuario desconectado", player: player});
      base.removePlayerById(player.id);
      console.log('Got disconnect: ' + JSON.stringify(_.pick(player, ['id', 'room', 'name'])));
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
