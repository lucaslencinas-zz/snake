#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('snake:server');
var server = require('http').Server(app);
var io = require('socket.io')(server);
var base = require('../db').base;
/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(3000);
server.on('error', onError);
server.on('listening', onListening);
base.create();

/**
 * Web sockets listeners for the different events
 */
server.listen('3000');
io.on('connection', function(socket){
  if(socket.handshake.query.amountOfPlayers){
    // Is the server
  } else {
    var player = {
      id: socket.id,
      room: socket.handshake.query.room,
      name: socket.handshake.query.name
    };
    base.insertPlayer(player);
    console.log('players: ' + base.getPlayers());
    io.emit('user-connected', {msg: "usuario connectado", player: player});
  }

  socket.on('button clicked', function(msg){
    console.log('button clicked');
    io.emit('button clicked', msg);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
